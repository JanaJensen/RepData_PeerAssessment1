?dcast
library(reshape2)
?dcast
?merge
?plyr
ls("package.plyr")
ls("package:plyr")
find.funs("package:plyr")
?require
setwd("~/GitHub/ExData_Plotting1")
source("plot1.R", print.eval=TRUE)
source("plot2.R", print.eval=TRUE)
source("plot3.R", print.eval=TRUE)
source("plot4.R", print.eval=TRUE)
srcdatafile <- paste(srcloc,"getdata%2Fdata%2FDATA.gov_NGAP.xlsx ",sep="/")
tgtdatafile <- paste(tgtloc,"getdata-data-DATA.gov_NGAP.xlsx",sep="/")
srcloc <- "https://d396qusza40orc.cloudfront.net"
tgtloc <- "C:/Users/Skukkuk/Desktop/Class - Data Science"
srcdatafile <- paste(srcloc,"getdata%2Fdata%2FDATA.gov_NGAP.xlsx ",sep="/")
tgtdatafile <- paste(tgtloc,"getdata-data-DATA.gov_NGAP.xlsx",sep="/")
download.file(srcdatafile,tgtdatafile,mode="wb")
library(xlsx)
colIdx <- 7:15
rowIdx <- 18:23
dat <- read.xlsx(tgtdatafile,sheetIndex=1,
colIndex=colIdx,rowIndex=rowIdx)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
srcdatafile <- paste(srcloc,"getdata%2Fdata%2Fss06pid.csv",sep="/")
tgtdatafile <- paste(tgtloc,"getdata-data-ss06pid.csv",sep="/")
download.file(srcdatafile,tgtdatafile,"auto")
data <- read.csv(tgtdatafile, colClasses = "character")
str(data)
names(data)
DT <- fread(tgtdatafile)
library(data.table)
DT <- fread(tgtdatafile)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) # yes
DT[,mean(pwgtp15),by=SEX]                                  # yes
setwd("C:/Users/Skukkuk/Desktop/Class - Data Science")
setwd("~/GitHub/datasciencecoursera")
library(lattice)  # uses grid package, not used directly
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, # plot LE over income by region
data=state,     # data source
layout=c(4,1))  # four columns, one row
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each 50)
y <- x + f - f*x + rnorm(100,sd=0.5)
f <- factor(f,labels=c("Group 1","Group 2"))
xyplot(y ~ x | f,
layout=c(2,1)) # plot two panels side-by-side
f <- rep(0:1, each=50)
y <- x + f - f*x + rnorm(100,sd=0.5)
f <- factor(f,labels=c("Group 1","Group 2"))
xyplot(y ~ x | f,
layout=c(2,1)) # plot two panels side-by-side
xyplot(y ~ x | f,
panel=function(x,y,...){
panel.xyplot(x,y,...) # first call the default panel
panel.abline(h=median(y), lty=2) # add a horizontal line at y median
}
)
xyplot(y ~ x | f,
panel=function(x,y,...){
panel.xyplot(x,y,...) # first call the default panel
panel.abline(h=median(y), lty=2), # add a horizontal line at y median
layout=c(2,1)
})
xyplot(y ~ x | f,
panel=function(x,y,...){
panel.xyplot(x,y,...) # first call the default panel
panel.abline(h=median(y), lty=2) # add a horizontal line at y median
})
xyplot(y ~ x | f,
panel=function(x,y,...){
panel.xyplot(x,y,...) # first call the default panel
panel.lmline(h=median(y), col=2) # add a simple linear regression
})
xyplot(y ~ x | f,
panel=function(x,y,...){
panel.xyplot(x,y,...) # first call the default panel
panel.lmline(x,y, col=2) # add a simple linear regression
})
library(ggplot2)
data(mpg)
qplot(displ,hwy,data=mpg)
str(mpg)
qplot(displ,hwy,  # x=displ, y=hwy
data=mpg,   # source data
color=drv)  # dot color is determined by drv value
qplot(displ,hwy,  # x=displ, y=hwy
data=mpg,   # source data
color=drv,  # color is determined by drv value
geom=c("point","smooth")
)
qplot(displ,hwy,  # x=displ, y=hwy
data=mpg,   # source data
#      color=drv,  # color is determined by drv value
geom=c("point","smooth")
)
qplot(hwy, data=mpg, fill=drv)
qplot(displ,hwy,
data=mpg,
facets=. ~ drv)
qplot(displ,hwy,
data=mpg,
color=drv,  # color is determined by drv value
facets=. ~ drv) # show drv values side-by-side
facets=drv ~ .) # show drv values, . rows and drv columns
qplot(displ,hwy,
data=mpg,
facets=drv ~ .) # show drv values, . rows and drv columns
qplot(hwy,
data=mpg,
facets=drv ~ .) # show drv values, drv rows and one col
qplot(hwy,        # one dimension (histogram)
data=mpg,
facets=drv ~ .,
color=displ)
qplot(hwy,        # one dimension (histogram)
data=mpg,
facets=drv ~ .,
fill=displ)
library(lattice)  # uses grid package, not used directly
state <- data.frame(state.x77, region=state.region)
class(xyplot(Life.Exp ~ Income | region, # plot LE over income by region
data=state,     # data source
layout=c(4,1))  # four columns, one row
)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
?panel.abline
?axis
?trellis.par.set
?print.trellis
?splom
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
?qplot.smooth
?qplot
?ggplot
qplot(votes, rating, data = movies) + geom_smooth()
?qbeta
library(plyr)      # ddply, summarise, join
library(lattice)   # xyplot
setwd("~/GitHub/RepData_PeerAssessment1")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
zipfile <- "activity.zip"
if(!file.exists(zipfile)){download.file(fileUrl,destfile=zipfile)}
unzip(zipfile, list=FALSE)
textfile <- unzip(zipfile,files=NULL,list=TRUE)[1,"Name"] # let zip tell us text file name
fullData <- read.csv(textfile)
summary(fullData)
str(fullData)
length(distinct fullData$date)
length(unique(fullData$date))
length(unique(fullData$interval))
median(fullData$steps)
median(fullData[which(fullData$steps>=0),"steps"])
length(fullData[which(is.na(fullData$steps),"steps"])
?is.na
sum(is.na(fullData$steps))
length(unique(fullData$date))
min(as.Date(fullData$date))
r max(as.Date(fullData$date))
max(as.Date(fullData$date))
min(as.Date(fullData$date))
dayData <- ddply(fullData[which(fullData$steps>=0),],  # non-missing values
"date", # aggregation field
summarise,
total=sum(steps))
# plot the distribution
hist(dayData$total,
main="Number of steps taken per day",
sub="(missing values omitted)",
xlab="total steps taken", ylab="number of days")
abline(v=round(median(dayData$total),2), # vertical line at the median
lwd=2,col="blue")
text(dayMedian-3000, 26, labels=paste("median=",dayMedian), col="blue")
abline(v=round(mean(dayData$total),2), # vertical line at the mean
lwd=1, col="red")
text(dayMean+3300, 27, labels=paste("mean=",dayMean), col="red")
```
?text
# aggregate the data and calculate values of interest
intervalData <- ddply(fullData[which(fullData$steps>=0),],  # non-missing values
"interval", # aggregation field
summarise,
avgSteps=round(mean(steps),2))
intervalMax <- max(intervalData$avgSteps)
maxInterval <- intervalData[intervalData$avgSteps==intervalMax,"interval"]
fullData$dow <- as.factor(strftime(fullData$date,'%a')) # add DOW for means
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE),0))
filledData <- ddply(fullData, .(interval,dow),
transform,
steps = impute.mean(steps))
dayData2 <- ddply(filledData,  # missing values filled in
"date", # aggregation field
summarise,
total=sum(steps))
dayMean2   <- round(mean(dayData2$total),2)
dayMedian2 <- round(median(dayData2$total),2)
dayData <- ddply(fullData[which(fullData$steps>=0),],  # non-missing values
"date", # aggregation field
summarise,
total=sum(steps))
dayMean   <- round(mean(dayData$total),2)
dayMedian <- round(median(dayData$total),2)
intervalData <- ddply(fullData[which(fullData$steps>=0),],  # non-missing values
"interval", # aggregation field
summarise,
avgSteps=round(mean(steps),2))
intervalMax <- max(intervalData$avgSteps)
maxInterval <- intervalData[intervalData$avgSteps==intervalMax,"interval"]
fullData$dow <- as.factor(strftime(fullData$date,'%a')) # add DOW for means
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE),0))
filledData <- ddply(fullData, .(interval,dow),
transform,
steps = impute.mean(steps))
dayData2 <- ddply(filledData,  # missing values filled in
"date", # aggregation field
summarise,
total=sum(steps))
dayMean2   <- round(mean(dayData2$total),2)
dayMedian2 <- round(median(dayData2$total),2)
par(mfrow = c(1,2))  # two plots, side-by-side
hist(dayData2$total,
main="Number of steps taken per day",
sub="(missing values filled with average for day of week and interval)",
xlab="total steps taken", ylab="number of days")
abline(v=dayMedian2,lwd=2,col="blue")
text(dayMedian2+3300, 26, labels=paste("median=",dayMedian2), col="blue")
abline(v=dayMean2,lwd=2, col="red")
text(dayMean2-3100, 27, labels=paste("mean=",dayMean2), col="red")
with(intervalData,plot(interval,avgSteps,
type='l',
main="Average daily activity pattern across all days",
sub="(missing values omitted)",
xlab='5-minute interval',
ylab='Average steps taken across all days'))
abline(v=maxInterval,lwd=2,col="red")
abline(h=intervalMax,col="red")
text(maxInterval+800,intervalMax-20,col="red",
labels=paste("highest average is ",intervalMax," steps
in interval ",maxInterval))
?fig.width
intervalData2 <- ddply(fullData[which(fullData$steps>=0),],  # non-missing values
"interval", # aggregation field
summarise,
avgSteps=round(mean(steps),2))
intervalMax2 <- max(intervalData2$avgSteps)
maxInterval2 <- intervalData2[intervalData2$avgSteps==intervalMax2,"interval"]
par(mfrow = c(2,1))  # two plots stacked
# old plot repeated
with(intervalData,plot(interval,avgSteps,
type='l',
main="Average daily activity pattern across all days (old)",
sub="(missing values omitted)",
xlab='5-minute interval',
ylab='Average steps taken across all days'))
abline(v=maxInterval,lwd=2,col="red")
abline(h=intervalMax,col="red")
text(maxInterval+800,intervalMax-20,col="red",
labels=paste("highest average is ",intervalMax," steps
in interval ",maxInterval))
# new plot
with(intervalData2,plot(interval,avgSteps,
type='l',
main="Average daily activity pattern across all days (old)",
sub="(missing values filled with average for day of week and interval)",
xlab='5-minute interval',
ylab='Average steps taken across all days'))
abline(v=maxInterval2,lwd=2,col="red")
abline(h=intervalMax2,col="red")
text(maxInterval2+800,intervalMax2-20,col="red",
labels=paste("highest average is ",intervalMax2," steps
in interval ",maxInterval2))
